{"version":3,"sources":["components/filter.js","components/recipe.js","components/recipes.js","services/recipeService.js","components/recipeForm.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","className","value","searchTerm","onChange","handleSearch","Recipe","recipe","style","color","name","ingredients","method","Recipes","recipes","filter","r","toLowerCase","includes","map","baseUrl","req","axios","get","console","log","then","res","data","catch","error","newRecipe","post","response","Error","RecipeForm","onSubmit","addRecipe","newName","handleNameChange","newIngredients","handleIngredientsChange","newMethod","handleMethodChange","type","App","useState","setRecipes","setNewName","setNewIngredients","setNewMethod","setSearchTerm","useEffect","recipeService","initialRecipes","event","preventDefault","target","recipeObject","returnedRecipe","concat","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fe48c09.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../App.css\"\n\nconst Filter = (props) => {\n  return (\n    <form className=\"form\">\n      <div>\n        <p className=\"sansserif\">filter shown with:</p>\n        <input\n          className=\"search\"\n          value={props.searchTerm}\n          onChange={props.handleSearch}\n        />\n      </div>\n    </form>\n  )\n}\n\nexport default Filter\n","import React from \"react\"\n\nconst Recipe = (recipe) => {\n  return (\n    <div>\n      <p style={{ color: \"black\" }}>{recipe.name}</p>\n      <p style={{ color: \"grey\" }}>{recipe.ingredients}</p>\n      <p style={{ color: \"grey\" }}>{recipe.method}</p>\n    </div>\n  )\n}\n\nexport default Recipe\n","import React from \"react\"\nimport Recipe from \"./recipe\"\n\nconst Recipes = ({ recipes, searchTerm }) => {\n  return (\n    <ul>\n      {recipes\n        .filter((r) => r.name.toLowerCase().includes(searchTerm))\n        .map((r) => (\n          <div>{Recipe(r)}</div>\n        ))}\n    </ul>\n  )\n}\n\nexport default Recipes\n","import axios from \"axios\"\n\nconst baseUrl = \"/api/recipes\"\n\nconst getAll = () => {\n  const req = axios.get(baseUrl)\n  console.log(\"request\", req)\n\n  return req\n    .then((res) => res.data)\n    .catch((error) => {\n      console.log(\"fail\", error)\n    })\n}\n\nconst getOne = (id) => {\n  const req = axios.get(`${baseUrl}/${id}`)\n  console.log(\"request\", req)\n  return req\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log(\"fail\", err)\n    })\n}\n\nconst createRecipe = (newRecipe) => {\n  const req = axios.post(baseUrl, newRecipe)\n\n  return req\n    .then((res) => res.data)\n    .then((data) => {\n      console.log(data, \"has been added\")\n      return data\n    })\n    .catch((error) => {\n      console.log(error.response.data.error)\n      throw Error(error.response.data.error)\n    })\n}\n\nconst updateRecipe = (id, newRecipe) => {\n  const req = axios.put(`${baseUrl}/${id}`, newRecipe)\n  return req.then((res) => res.data)\n}\n\nconst deleteRecipe = (id, recipe) => {\n  const req = axios.delete(`${baseUrl}/${id}`, recipe)\n  return req.then((res) => res.data)\n}\n\nexport default {\n  getAll,\n  getOne,\n  createRecipe,\n  updateRecipe,\n  deleteRecipe,\n}\n","import React from \"react\"\nimport \"../App.css\"\n\nconst RecipeForm = (props) => {\n  console.log(props)\n  return (\n    <form onSubmit={props.addRecipe} className=\"form\">\n      <div>\n        <p className=\"sansserif\">name: </p>\n        <input\n          className=\"field\"\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        <p className=\"sansserif\">ingredients: </p>\n        <input\n          className=\"field\"\n          value={props.newIngredients}\n          onChange={props.handleIngredientsChange}\n        />\n      </div>\n      <div>\n        <p className=\"sansserif\">method: </p>\n        <input\n          className=\"field\"\n          value={props.newMethod}\n          onChange={props.handleMethodChange}\n        />\n      </div>\n      <div>\n        <p>\n          <button type=\"submit\">add</button>\n        </p>\n      </div>\n    </form>\n  )\n}\n\nexport default RecipeForm\n","import React, { useState, useEffect } from \"react\"\n\nimport Filter from \"./components/filter\"\nimport Recipes from \"./components/recipes\"\n\nimport recipeService from \"./services/recipeService\"\nimport RecipeForm from \"./components/recipeForm\"\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([])\n\n  const [newName, setNewName] = useState(\"\")\n  const [newIngredients, setNewIngredients] = useState([])\n  const [newMethod, setNewMethod] = useState([])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  useEffect(() => {\n    console.log(\"initialRecipes\")\n    recipeService.getAll().then((initialRecipes) => {\n      setRecipes(initialRecipes)\n    })\n  }, [])\n  console.log(\"recipes: \", recipes)\n\n  const handleNameChange = (event) => {\n    event.preventDefault()\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleIngredientsChange = (event) => {\n    event.preventDefault()\n    setNewIngredients(event.target.value)\n  }\n\n  const handleMethodChange = (event) => {\n    event.preventDefault()\n    setNewMethod(event.target.value)\n  }\n\n  const addRecipe = (event) => {\n    event.preventDefault()\n\n    const recipeObject = {\n      name: newName,\n      ingredients: newIngredients,\n      method: newMethod,\n    }\n\n    console.log(\"new recipe: \", recipeObject)\n\n    recipeService\n      .createRecipe(recipeObject)\n      .then((returnedRecipe) => {\n        setRecipes(recipes.concat(returnedRecipe)).then(\n          console.log(\"recipes: \", recipes)\n        )\n        setNewName(\"\")\n        setNewIngredients([])\n        setNewMethod([])\n      })\n      .catch((error) => {\n        console.log(error.message)\n      })\n  }\n\n  const handleSearch = (event) => {\n    event.preventDefault()\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div className=\"appBorder\">\n      <h2 className=\"header\">Omat Reseptit</h2>\n\n      <Filter searchTerm={searchTerm} handleSearch={handleSearch} />\n      <h2>add a new</h2>\n      <RecipeForm\n        addRecipe={addRecipe}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newIngredients={newIngredients}\n        handleIngredientsChange={handleIngredientsChange}\n        newMethod={newMethod}\n        handleMethodChange={handleMethodChange}\n      />\n      <h2>Recipes</h2>\n      <div>\n        <p className=\"column\">\n          <Recipes recipes={recipes} searchTerm={searchTerm} />\n        </p>\n        <p className=\"column\">\n          <Recipes recipes={recipes} searchTerm={searchTerm} />\n        </p>\n        <p className=\"column\">\n          <Recipes recipes={recipes} searchTerm={searchTerm} />\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}