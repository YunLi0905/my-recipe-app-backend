{"version":3,"sources":["components/recipe.js","components/recipes.js","components/filter.js","services/recipeService.js","components/recipeForm.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","recipe","name","ingredients","method","Recipes","props","recipes","filter","toLowerCase","includes","searchTerm","map","key","id","Filter","value","onChange","handleSearch","baseUrl","req","axios","get","console","log","then","res","data","catch","error","newRecipe","post","response","Error","put","RecipeForm","onSubmit","addRecipe","newName","handleNameChange","newIngredients","handleIngredientsChange","newMethod","handleMethodChange","type","App","useState","setRecipes","setNewName","setNewIngredients","setNewMethod","setSearchTerm","useEffect","recipeService","initialRecipes","event","preventDefault","target","length","find","r","window","confirm","recipeObject","returnedRecipe","concat","message","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07eb9c3f.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Recipe = (recipe) => {\n  return (\n    <p>\n      {recipe.name}\n      {recipe.ingredients}\n      {recipe.method}\n    </p>\n  )\n}\n\nexport default Recipe\n","import React from \"react\"\nimport Recipe from \"./recipe\"\n\nconst Recipes = (props) => {\n  return (\n    <ul>\n      {props.recipes\n        .filter((recipe) =>\n          recipe.name.toLowerCase().includes(props.searchTerm)\n        )\n        .map((recipe) => (\n          <Recipe key={recipe.id} recipe={recipe} />\n        ))}\n    </ul>\n  )\n}\n\nexport default Recipes\n","import React from \"react\"\n\nconst Filter = (props) => {\n  return (\n    <form>\n      <div>\n        filter shown with:\n        <input value={props.searchTerm} onChange={props.handleSearch} />\n      </div>\n    </form>\n  )\n}\n\nexport default Filter\n","import axios from \"axios\"\n\nconst baseUrl = \"/api/recipes\"\n\nconst getAll = () => {\n  const req = axios.get(baseUrl)\n  console.log(\"request\", req)\n\n  return req\n    .then((res) => res.data)\n    .catch((error) => {\n      console.log(\"fail\", error)\n    })\n}\n\nconst getOne = (id) => {\n  const req = axios.get(`${baseUrl}/${id}`)\n  console.log(\"request\", req)\n  return req\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log(\"fail\", err)\n    })\n}\n\nconst createRecipe = (newRecipe) => {\n  const req = axios.post(baseUrl, newRecipe)\n\n  return req\n    .then((res) => res.data)\n    .then((res) => console.log(res.data + \"has been added\"))\n    .catch((error) => {\n      console.log(error.response.data.error)\n      throw Error(error.response.data.error)\n    })\n}\n\nconst updateRecipe = (id, newRecipe) => {\n  const req = axios.put(`${baseUrl}/${id}`, newRecipe)\n  return req.then((res) => res.data)\n}\n\nconst deleteRecipe = (id, recipe) => {\n  const req = axios.delete(`${baseUrl}/${id}`, recipe)\n  return req.then((res) => res.data)\n}\n\nexport default {\n  getAll,\n  getOne,\n  createRecipe,\n  updateRecipe,\n  deleteRecipe,\n}\n","import React from \"react\"\n\nconst RecipeForm = (props) => {\n  console.log(props)\n  return (\n    <form onSubmit={props.addRecipe}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        ingredients:{\" \"}\n        <input\n          value={props.newIngredients}\n          onChange={props.handleIngredientsChange}\n        />\n      </div>\n      <div>\n        method:{\" \"}\n        <input value={props.newMethod} onChange={props.handleMethodChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default RecipeForm\n","import React, { useState, useEffect } from \"react\"\nimport Recipes from \"./components/recipes\"\nimport Filter from \"./components/filter\"\n\nimport recipeService from \"./services/recipeService\"\nimport RecipeForm from \"./components/recipeForm\"\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([])\n\n  const [newName, setNewName] = useState(\"\")\n  const [newIngredients, setNewIngredients] = useState([])\n  const [newMethod, setNewMethod] = useState([])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  useEffect(() => {\n    console.log(\"initialRecipes\")\n    recipeService.getAll().then((initialRecipes) => {\n      setRecipes(initialRecipes)\n    })\n  }, [])\n  console.log(\"recipes: \", recipes)\n\n  const handleNameChange = (event) => {\n    event.preventDefault()\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleIngredientsChange = (event) => {\n    event.preventDefault()\n    setNewIngredients(event.target.value)\n  }\n\n  const handleMethodChange = (event) => {\n    event.preventDefault()\n    setNewMethod(event.target.value)\n  }\n\n  const addRecipe = (event) => {\n    event.preventDefault()\n\n    if (recipes.filter((recipe) => recipe.name === newName).length > 0) {\n      const recipe = recipes.find((r) => r.name === newName)\n      const resultConfirmed = window.confirm(\n        newName +\n          \" is already added to recipes, do you want to replace the old one?\"\n      )\n\n      if (resultConfirmed) {\n        const recipeObject = {\n          name: newName,\n          ingredients: newIngredients,\n          method: newMethod,\n        }\n\n        recipeService.updateRecipe(recipe.id, recipeObject)\n\n        setRecipes(\n          recipes.map((r) => {\n            if (r.name !== recipe.name) {\n              return r\n            }\n            return { ...r, ingredients: newIngredients, method: newMethod }\n          })\n        )\n      }\n      setNewName(\"\")\n      setNewIngredients([])\n      setNewMethod([])\n    } else {\n      const recipeObject = {\n        name: newName,\n        ingredients: newIngredients,\n        method: newMethod,\n      }\n\n      console.log(\"new recipe: \", recipeObject)\n      recipeService\n        .createRecipe(recipeObject)\n        .then((returnedRecipe) => {\n          setRecipes(recipes.concat(returnedRecipe)).then(\n            console.log(\"recipes: \", recipes)\n          )\n          setNewName(\"\")\n          setNewIngredients([])\n          setNewMethod([])\n        })\n        .catch((error) => {\n          console.log(error.message)\n        })\n    }\n  }\n\n  const handleSearch = (event) => {\n    event.preventDefault()\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Reseptit</h2>\n      <Filter searchTerm={searchTerm} handleSearch={handleSearch} />\n      <h2>add a new</h2>\n      <RecipeForm\n        addRecipe={addRecipe}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newIngredients={newIngredients}\n        handleIngredientsChange={handleIngredientsChange}\n        newMethod={newMethod}\n        handleMethodChange={handleMethodChange}\n      />\n\n      <h2>Recipes</h2>\n      <Recipes recipes={recipes} searchTerm={searchTerm} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport axios from \"axios\"\n\nconst promise = axios.get(\"http://localhost:3001/recipes\")\n\npromise.then((res) => {\n  console.log(res)\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}