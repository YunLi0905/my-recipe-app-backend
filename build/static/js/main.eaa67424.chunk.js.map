{"version":3,"sources":["services/recipeService.js","components/recipes.js","components/filter.js","pages/homepage.js","components/recipeForm.js","components/recipe.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","req","axios","get","console","log","then","res","data","catch","error","newRecipe","post","response","Error","Recipes","recipes","map","recipe","style","color","name","ingredients","method","Filter","props","className","placeholder","value","searchTerm","onChange","handleSearch","Home","useState","setSearchTerm","setRecipes","useEffect","recipeService","initialRecipes","event","preventDefault","target","RecipeForm","newName","setNewName","newIngredients","setNewIngredients","newMethod","setNewMethod","onSubmit","recipeObject","returnedRecipe","concat","message","type","Recipe","App","match","useRouteMatch","find","r","id","Number","params","to","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eaa67424.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst baseUrl = \"/api/recipes\"\n\nconst getAll = () => {\n  const req = axios.get(baseUrl)\n  console.log(\"request\", req)\n\n  return req\n    .then((res) => res.data)\n    .catch((error) => {\n      console.log(\"fail\", error)\n    })\n}\n\nconst getOne = (id) => {\n  const req = axios.get(`${baseUrl}/${id}`)\n  console.log(\"request\", req)\n  return req\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log(\"fail\", err)\n    })\n}\n\nconst createRecipe = (newRecipe) => {\n  const req = axios.post(baseUrl, newRecipe)\n\n  return req\n    .then((res) => res.data)\n    .then((data) => {\n      console.log(data, \"has been added\")\n      return data\n    })\n    .catch((error) => {\n      console.log(error.response.data.error)\n      throw Error(error.response.data.error)\n    })\n}\n\nconst updateRecipe = (id, newRecipe) => {\n  const req = axios.put(`${baseUrl}/${id}`, newRecipe)\n  return req.then((res) => res.data)\n}\n\nconst deleteRecipe = (id, recipe) => {\n  const req = axios.delete(`${baseUrl}/${id}`, recipe)\n  return req.then((res) => res.data)\n}\n\nexport default {\n  getAll,\n  getOne,\n  createRecipe,\n  updateRecipe,\n  deleteRecipe,\n}\n","import React from \"react\"\n\nimport { BrowserRouter as Link } from \"react-router-dom\"\n\nconst Recipes = ({ recipes }) => {\n  return (\n    <div>\n      <h2>Recipes</h2>\n      <ul>\n        {recipes.map((recipe) => {\n          return (\n            <div>\n              <p style={{ color: \"black\" }}>{recipe.name}</p>\n              <p style={{ color: \"grey\" }}>Ingredients: {recipe.ingredients}</p>\n              <p style={{ color: \"grey\" }}>Method: {recipe.method}</p>\n            </div>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Recipes\n","import React from \"react\"\nimport \"../App.css\"\n\nconst Filter = (props) => {\n  return (\n    <form>\n      <div>\n        <input\n          className=\"search\"\n          placeholder=\"Search recipe\"\n          value={props.searchTerm}\n          onChange={props.handleSearch}\n        />\n      </div>\n    </form>\n  )\n}\n\nexport default Filter\n","import React, { useState, useEffect } from \"react\"\nimport Recipes from \"../components/recipes\"\nimport recipeService from \"../services/recipeService\"\nimport Filter from \"../components/filter\"\n\nconst Home = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [recipes, setRecipes] = useState([])\n\n  const handleSearch = (event) => {\n    event.preventDefault()\n    setSearchTerm(event.target.value)\n    console.log(\"search term: \", searchTerm)\n  }\n\n  useEffect(() => {\n    console.log(\"initialRecipes\")\n    recipeService.getAll().then((initialRecipes) => {\n      setRecipes(initialRecipes)\n    })\n  }, [])\n\n  return (\n    <div>\n      <h2 className=\"head-image\">\n        <div className=\"head-text\">\n          <h1 className=\"appHeaderText\">Omat Reseptit</h1>\n          <Filter\n            className=\"search\"\n            searchTerm={searchTerm}\n            handleSearch={handleSearch}\n          />\n          <br />\n          <p>HAE RESEPTIT KOTIKEITTIÖÖN</p>\n        </div>\n        <br />\n      </h2>\n    </div>\n  )\n}\n\nexport default Home\n","import React, { useState } from \"react\"\nimport recipeService from \"../services/recipeService\"\nimport \"../App.css\"\n\nconst RecipeForm = () => {\n  const [newName, setNewName] = useState(\"\")\n  const [newIngredients, setNewIngredients] = useState([])\n  const [newMethod, setNewMethod] = useState([])\n  const [recipes, setRecipes] = useState([])\n\n  const handleNameChange = (event) => {\n    event.preventDefault()\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleIngredientsChange = (event) => {\n    event.preventDefault()\n    setNewIngredients(event.target.value)\n  }\n\n  const handleMethodChange = (event) => {\n    event.preventDefault()\n    setNewMethod(event.target.value)\n  }\n\n  const addRecipe = (event) => {\n    event.preventDefault()\n\n    const recipeObject = {\n      name: newName,\n      ingredients: newIngredients,\n      method: newMethod,\n    }\n    console.log(\"new recipe: \", recipeObject)\n\n    recipeService\n      .createRecipe(recipeObject)\n      .then((returnedRecipe) => {\n        setRecipes(recipes.concat(returnedRecipe)).then(\n          console.log(\"recipes: \", recipes)\n        )\n        setNewName(\"\")\n        setNewIngredients([])\n        setNewMethod([])\n      })\n      .catch((error) => {\n        console.log(error.message)\n      })\n  }\n  return (\n    <div>\n      <form onSubmit={addRecipe} className=\"form\">\n        <div>\n          <p className=\"sansserif\">name: </p>\n          <input\n            className=\"field\"\n            value={newName}\n            onChange={handleNameChange}\n          />\n        </div>\n        <div>\n          <p className=\"sansserif\">ingredients: </p>\n          <input\n            className=\"field\"\n            value={newIngredients}\n            onChange={handleIngredientsChange}\n          />\n        </div>\n        <div>\n          <p className=\"sansserif\">method: </p>\n          <input\n            className=\"field\"\n            value={newMethod}\n            onChange={handleMethodChange}\n          />\n        </div>\n        <div>\n          <p>\n            <button type=\"submit\">add</button>\n          </p>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default RecipeForm\n","import React from \"react\"\n\nconst Recipe = (recipe) => {\n  return (\n    <div>\n      <p style={{ color: \"black\" }}>{recipe.name}</p>\n      <p style={{ color: \"grey\" }}>{recipe.ingredients}</p>\n      <p style={{ color: \"grey\" }}>{recipe.method}</p>\n    </div>\n  )\n}\n\nexport default Recipe\n","import React, { useState, useEffect } from \"react\"\n\nimport recipeService from \"./services/recipeService\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n} from \"react-router-dom\"\n\nimport Recipes from \"./components/recipes\"\nimport Home from \"./pages/homepage\"\nimport RecipeForm from \"./components/recipeForm\"\nimport Recipe from \"./components/recipe\"\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([])\n\n  useEffect(() => {\n    console.log(\"initialRecipes\")\n    recipeService.getAll().then((initialRecipes) => {\n      setRecipes(initialRecipes)\n    })\n  }, [])\n\n  console.log(\"recipes: \", recipes)\n\n  const match = useRouteMatch(\"/recipes/:id\")\n  const recipe = match\n    ? recipes.find((r) => r.id === Number(match.params.id))\n    : null\n\n  return (\n    <Router>\n      <div className=\"topnav\">\n        <ul>\n          <Link className=\"navbarFont\" to=\"/\">\n            Home\n          </Link>\n\n          <Link className=\"navbarFont\" to=\"/recipes\">\n            Lisää resepti\n          </Link>\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/recipes/:id\">\n          <Recipe recipe={recipe} />\n        </Route>\n        <Route path=\"/recipes\">\n          <RecipeForm />\n          <Recipes recipes={recipes} />\n        </Route>\n\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}